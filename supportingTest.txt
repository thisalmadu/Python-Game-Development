===========================================================================================================================================
1) Setting Up a Pygame Program [blankpygame.py]
===========================================================================================================================================
The first few lines of code in the "blankpygame.py" program are lines that will begin almost every program you write that uses Pygame.

1.1 >> import pygame, sys
-----------------------------------------
Line 1 is a simple import statement that imports the 'pygame' and 'sys' modules so that our program can use the function in them. All of the
Pygame functions dealing with graphics, sounds and other features that Pygame provides are in the 'pygame' module. Note that you import the
'pygame' module you automatically import all the modules that are in the 'pygame' module as well, such as 'pygame.images' and 'pygame.mixer.music'.
There's no need to import these modules with additional 'import' statement.

1.2 >> from pygame.locals import *
----------------------------------------
Line 1.2 is also important statement. However, instead of import 'modulename' format, it uses the 'from modulename import *' format. Noemally if you
want call a function that is in a module, you must use the 'modulename.functionname()' format after importing the module. However, with
'from modulename import *', you can skip the 'modulename.' protion and simply use 'functionname()' [just like Python's built-in functions].
The reason we use this form of important statement for 'pygame.locals' is because 'pygame.locals' contains several constant variables that are
easy to identify as being in the 'pygane.locals' module without 'pygame.locals.' in front of them. Foe all other modules, you generally want to use
the regular 'import modulename' format.

1.3 >> pygame.init()
----------------------------------------
Line 1.3 is the 'pygame.init()' function call, which always needs to be called after importing the 'pygame' module and before calling any other
Pygame function. You don’t need to know what this function does, you just need to know that it needs to be called first in order for many
Pygame functions to work. If you ever see an error message like pygame.error: font not initialized, check to see if you forgot to
call 'pygame.init()' at the start of your program.

1.4 >> DISPLAYSURF = pygame.display.set_mode((400, 300))
-------------------------------------------------------------
Line 1.4 is a call to the 'pygame.display.set_mode()' function, which returns the 'pygame.Surface' object for the window.
(Surface objects are described later in this chapter). Notice that we pass a tuple value of two integers to the function: (400, 300).
This tuple tells the 'set_mode()' function how wide and how high to make the window in pixels. (400, 300) will make a window
with a width of 400 pixels and height of 300 pixels.
Remember to pass a tuple of two integers to 'set_mode()', not just two integers themselves. The correct way to call the function is
like this: 'pygame.display.set_mode((400, 300))'. A function call like 'pygame.display.set_mode(400, 300)' will cause an error
that looks like this: TypeError: argument 1 must be 2-item sequence, not int.
The pygame.Surface object (we will just call them Surface objects for short) returned is stored in a variable named DISPLAYSURF.

1.5 >> pygame.display.set_caption('Welcome to the Game!')
----------------------------------------------------------
Line 1.5 sets the caption text that will appear at the top of the window by calling the pygame.display.set_caption() function.
The string value 'Hello World!' is passed in this function call to make that text appear as the caption:

============================================================================================================================
2) Game Loops and Game States [blankpygame.py]
=============================================================================================================================
2.1 >> while True: # main game loop
    >>    for event in pygame.event.get():
----------------------------------------------
Line 2.1 is a while loop that has a condition of simply the value True. This means that it never exits due to its condition evaluating to False.
The only way the program execution will ever exit the loop is if a break statement is executed (which moves execution to the first line
after the loop) or 'sys.exit()' (which terminates the program). If a loop like this was inside a function, a return statement will also move
execution out of the loop (as well as the function too).
The games in this book all have these while True loops in them along with a comment calling it the “main game loop”.
A game loop (also called a main loop) is a loop where the code does three things:
  1.  Handles events.
  2.  Updates the game state.
  3.  Draws the game state to the screen.
The 'game state' is simply a way of referring to a set of values for all the variables in a game program. In many games, the game state
includes the values in the variables that tracks the player’s health and position, the health and position of any enemies, which marks
have been made on a board, the score, or whose turn it is. Whenever something happens like the player taking damage
(which lowers their health value), or an enemy moves somewhere, or something happens in the game world we say that the game state has changed.
If you’ve ever played a game that let you saved, the “save state” is the game state at the point that you’ve saved it. In most games,
pausing the game will prevent the game state from changing. Since the game state is usually updated in response to events (such as mouse clicks
or keyboard presses) or the passage of time, the game loop is constantly checking and re-checking many times a second for any new events that
have happened. Inside the main loop is code that looks at which events have been created (with Pygame, this is done by calling the
'pygame.event.get()' function). The main loop also has code that updates the game state based on which events have been created.
This is usually called event handling.

pygame.event.Event Objects
---------------------------------
Any time the user does one of several actions (they are listed later in this chapter) such as pressing a keyboard key or moving the mouse
on the program’s window, a 'pygame.event.Event' object is created by the Pygame library to record this “event”.
(This is a type of object called Event that exists in the event module, which itself is in the pygame module.) We can find out which events
have happened by calling the 'pygame.event.get()' function, which returns a list of 'pygame.event.Event' objects (which we will just call
'Event objects' for short).
The list of 'Event objects' will be for each event that has happened since the last time the 'pygame.event.get()' function was called.
(Or, if 'pygame.event.get()' has never been called, the events that have happened since the start of the program.)
Second line in 2.1 is a for loop that will iterate over the list of Event objects that was returned by 'pygame.event.get()'.
On each iteration through the for loop, a variable named event will be assigned the value of the next event object in this list.
The list of Event objects returned from 'pygame.event.get()' will be in the order that the events happened. If the user clicked the mouse
and then pressed a keyboard key, the Event object for the mouse click would be the first item in the list and the Event object for the keyboard
press would be second. If no events have happened, then 'pygame.event.get()' will return a blank list.
The QUIT Event and 'pygame.quit()' Function

2.2 >>  if event.type == QUIT:
    >>      pygame.quit()
    >>      sys.exit()
---------------------------------------
Event objects have a member variable (also called attributes or properties) named type which tells us what kind of event the object represents.
Pygame has a constant variable for each of possible types in the 'pygame.locals' modules. First line checks if the Event object’s type is
equal to the constant QUIT. Remember that since we used the from 'pygame.locals import *' form of the import statement, we only have to type
QUIT instead of 'pygame.locals.QUIT'.
If the Event object is a quit event, then the 'pygame.quit()' and 'sys.exit()' functions are called. The 'pygame.quit()' function is sort
of the opposite of the 'pygame.init()' function: it runs code that deactivates the Pygame library. Your programs should always call
'pygame.quit()' before they call 'sys.exit()' to terminate the program. Normally it doesn’t really matter since Python closes it
when the program exits anyway. But there is a bug in IDLE that causes IDLE to hang if a Pygame program terminates before 'pygame.quit()'
is called.
Since we have no if statements that run code for other types of Event object, there is no event-handling code for when the user clicks
the mouse, presses keyboard keys, or causes any other type of Event objects to be created. The user can do things to create these Event
objects but it doesn’t change anything in the program because the program does not have any event-handling code for these types of Event objects.
After the for loop on second line of 2.1 is done handling all the Event objects that have been returned by 'pygame.event.get()',
the program execution continues to line 2.3.

2.3 >> pygame.display.update()
--------------------------------------
Line 12 calls the 'pygame.display.update()' function, which draws the Surface object returned by 'pygame.display.set_mode()' to the screen
(remember we stored this object in the DISPLAYSURF variable). Since the Surface object hasn’t changed (for example, by some of the drawing
functions that are explained later in this chapter), the same black image is redrawn to the screen each time 'pygame.display.update()' is called.
That is the entire program. After line 2.3 is done, the infinite while loop starts again from the beginning. This program does nothing besides
make a black window appear on the screen, constantly check for a QUIT event, and then redraws the unchanged black window to the screen over
and over again. Let’s learn how to make interesting things appear on this window instead of just blackness by learning about pixels, Surface objects,
Color objects, Rect objects, and the Pygame drawing functions.

================================================================================
3) Pixel Cordinates
================================================================================
The window that the “Hello World” program creates is just composed of little square dots on your screen called pixels.
Each pixel starts off as black but can be set to a different color. Imagine that instead of a Surface object that is 400 pixels wide and
300 pixels tall, we just had a Surface object that was 8 pixels by 8 pixels.

We can refer to a specific pixel by using a Cartesian Coordinate system. Each column of the X-axis and each row of the Y-axis will
have an “address” that is an integer from 0 to 7 so that we can locate any pixel by specifying the X and Y axis integers.

For example, in the above 8x8 image, we can see that the pixels at the XY coordinates (4, 0), (2, 2), (0, 5), and (5, 6) have been painted
black, the pixel at (2, 4) has been painted gray, while all the other pixels are painted white. XY coordinates are also called points.
If you’ve taken a math class and learned about Cartesian Coordinates, you might notice that the Y-axis starts at 0 at the top and then
increases going down, rather than increasing as it goes up. This is just how Cartesian Coordinates work in Pygame
(and almost every programming language).

The Pygame framework often represents Cartesian Coordinates as a tuple of two integers, such as (4, 0) or (2, 2).
The first integer is the X coordinate and the second is the Y coordinate.

================================================================================
4) Functions and Methods
================================================================================
The difference between the function and the method is that a method is always attached to an object. If we have a object named "dcckie"
and we have a method attched to that object called "foo()". we can call the method as
>> duckie.foo()
Observe that "sys.exit()" is a call of a function inside a module named "sys". in the begining we import the module as "import sys".
Constructor usually starts with uppercase. E.g. "pygame.Rect()"or "pygame.Surface()"

Example of a function call, a method call and a function inside a module
----------------------------------
import whammy  #import the module "whammy"
fizzy()  #a function calls
egg = Wombat() # "Wombat()" function returns an object, "egg"
egg.bluhbluh() # method call
whammy.spam() # a function call
----------------------------------

- the surface object is returned by "pygame.display.set_mode()"
- anything that is drawn on the display surface object will be displayed on the window when "pygame.display.update()" function is called.

================================================================================
5) Colors
================================================================================
Color       |  RGB value
--------------------
Aqua          (0,255,255)
black          (0,0,0)
Blue            (0,0,255)
Fuchsia       (255,0,255)
gray          (128,128,128)
Green         (0,128,0)
Lime          (0,255,0)
Maroon        (128,0,0)
Navy Blue     (0,0,128)
Olive         (128,128,0)
Purple        (128,0,128)
Red           (255,0,0)
Silver        (192,192,192)
Teal          (0,128,128)
white         (255,255,255)
Yellow        (255,255,0)
--------------------------------
3,1) Pygame Color objects
----------------------------------
>>> import pygame
>>> pygame.Color(255, 0, 0)
(255, 0, 0, 255)
>>> myColor = pygame.Color(255, 0, 0, 128)
>>> myColor == (255, 0, 0, 128)
True

================================================================================
6) Rect objects
================================================================================
Rect objects for short. For example, the code below creates a Rect object with a
top left corner at (10, 20) that is 200 pixels wide and 300 pixels tall:
>>> import pygame
>>> spamRect = pygame.Rect(10, 20, 200, 300)
>>> spamRect == (10, 20, 200, 300)
True

Later can access the attributes of the object as
>>> spamRect.right
210

If you reassign the right attribute, all the other attributes are
automatically recalculated:
>>> spamRect.right = 350
>>> spamRect.left
150
-------------------------------------------------------------------------
Attribute Name | Description
-------------------------------------------------------------------------
myRect.left    | The int value of the X-coordinate of the left side of the rectangle.

myRect.right   | The int value of the X-coordinate of the right side of the rectangle.

myRect.top     | The int value of the Y-coordinate of the top side of the rectangle.

myRect.bottom  | The int value of the Y-coordinate of the bottom side.

myRect.centerx | The int value of the X-coordinate of the center of the rectangle.

myRect.centery | The int value of the Y-coordinate of the center of the rectangle.

myRect.width   | The int value of the width of the rectangle.

myRect.height  | The int value of the height of the rectangle.

myRect.size    | A tuple of two ints: (width, height)

myRect.topleft | A tuple of two ints: (left, top)

myRect.topright| A tuple of two ints: (right, top)

myRect.bottomleft| A tuple of two ints: (left, bottom)

myRect.bottomright| A tuple of two ints: (right, bottom)

myRect.midleft    | A tuple of two ints: (left, centery)

myRect.midright   | A tuple of two ints: (right, centery)

myRect.midtop     | A tuple of two ints: (centerx, top)

myRect.midbottom  | A tuple of two ints: (centerx, bottom)
----------------------------------------------------------------------
